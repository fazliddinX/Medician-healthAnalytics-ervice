// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: helath/medical-records.proto

package healthAnalytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HealthAnalyticsService_AddMedicalRecord_FullMethodName    = "/health.HealthAnalyticsService/AddMedicalRecord"
	HealthAnalyticsService_GetMedicalRecord_FullMethodName    = "/health.HealthAnalyticsService/GetMedicalRecord"
	HealthAnalyticsService_UpdateMedicalRecord_FullMethodName = "/health.HealthAnalyticsService/UpdateMedicalRecord"
	HealthAnalyticsService_DeleteMedicalRecord_FullMethodName = "/health.HealthAnalyticsService/DeleteMedicalRecord"
	HealthAnalyticsService_ListMedicalRecords_FullMethodName  = "/health.HealthAnalyticsService/ListMedicalRecords"
)

// HealthAnalyticsServiceClient is the client API for HealthAnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthAnalyticsServiceClient interface {
	// --------------- Medical Records -------------------------
	AddMedicalRecord(ctx context.Context, in *AddMedicalRecordRequest, opts ...grpc.CallOption) (*MedicalRecord, error)
	GetMedicalRecord(ctx context.Context, in *MedicalRecordID, opts ...grpc.CallOption) (*MedicalRecord, error)
	UpdateMedicalRecord(ctx context.Context, in *UpdateMedicalRecordReq, opts ...grpc.CallOption) (*MedicalRecord, error)
	DeleteMedicalRecord(ctx context.Context, in *MedicalRecordID, opts ...grpc.CallOption) (*Message1, error)
	ListMedicalRecords(ctx context.Context, in *MedicalRecordFilter, opts ...grpc.CallOption) (*ListMedicalRecord, error)
}

type healthAnalyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthAnalyticsServiceClient(cc grpc.ClientConnInterface) HealthAnalyticsServiceClient {
	return &healthAnalyticsServiceClient{cc}
}

func (c *healthAnalyticsServiceClient) AddMedicalRecord(ctx context.Context, in *AddMedicalRecordRequest, opts ...grpc.CallOption) (*MedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecord)
	err := c.cc.Invoke(ctx, HealthAnalyticsService_AddMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAnalyticsServiceClient) GetMedicalRecord(ctx context.Context, in *MedicalRecordID, opts ...grpc.CallOption) (*MedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecord)
	err := c.cc.Invoke(ctx, HealthAnalyticsService_GetMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAnalyticsServiceClient) UpdateMedicalRecord(ctx context.Context, in *UpdateMedicalRecordReq, opts ...grpc.CallOption) (*MedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecord)
	err := c.cc.Invoke(ctx, HealthAnalyticsService_UpdateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAnalyticsServiceClient) DeleteMedicalRecord(ctx context.Context, in *MedicalRecordID, opts ...grpc.CallOption) (*Message1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message1)
	err := c.cc.Invoke(ctx, HealthAnalyticsService_DeleteMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAnalyticsServiceClient) ListMedicalRecords(ctx context.Context, in *MedicalRecordFilter, opts ...grpc.CallOption) (*ListMedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicalRecord)
	err := c.cc.Invoke(ctx, HealthAnalyticsService_ListMedicalRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthAnalyticsServiceServer is the server API for HealthAnalyticsService service.
// All implementations must embed UnimplementedHealthAnalyticsServiceServer
// for forward compatibility
type HealthAnalyticsServiceServer interface {
	// --------------- Medical Records -------------------------
	AddMedicalRecord(context.Context, *AddMedicalRecordRequest) (*MedicalRecord, error)
	GetMedicalRecord(context.Context, *MedicalRecordID) (*MedicalRecord, error)
	UpdateMedicalRecord(context.Context, *UpdateMedicalRecordReq) (*MedicalRecord, error)
	DeleteMedicalRecord(context.Context, *MedicalRecordID) (*Message1, error)
	ListMedicalRecords(context.Context, *MedicalRecordFilter) (*ListMedicalRecord, error)
	mustEmbedUnimplementedHealthAnalyticsServiceServer()
}

// UnimplementedHealthAnalyticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthAnalyticsServiceServer struct {
}

func (UnimplementedHealthAnalyticsServiceServer) AddMedicalRecord(context.Context, *AddMedicalRecordRequest) (*MedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMedicalRecord not implemented")
}
func (UnimplementedHealthAnalyticsServiceServer) GetMedicalRecord(context.Context, *MedicalRecordID) (*MedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecord not implemented")
}
func (UnimplementedHealthAnalyticsServiceServer) UpdateMedicalRecord(context.Context, *UpdateMedicalRecordReq) (*MedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicalRecord not implemented")
}
func (UnimplementedHealthAnalyticsServiceServer) DeleteMedicalRecord(context.Context, *MedicalRecordID) (*Message1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicalRecord not implemented")
}
func (UnimplementedHealthAnalyticsServiceServer) ListMedicalRecords(context.Context, *MedicalRecordFilter) (*ListMedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicalRecords not implemented")
}
func (UnimplementedHealthAnalyticsServiceServer) mustEmbedUnimplementedHealthAnalyticsServiceServer() {
}

// UnsafeHealthAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthAnalyticsServiceServer will
// result in compilation errors.
type UnsafeHealthAnalyticsServiceServer interface {
	mustEmbedUnimplementedHealthAnalyticsServiceServer()
}

func RegisterHealthAnalyticsServiceServer(s grpc.ServiceRegistrar, srv HealthAnalyticsServiceServer) {
	s.RegisterService(&HealthAnalyticsService_ServiceDesc, srv)
}

func _HealthAnalyticsService_AddMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAnalyticsServiceServer).AddMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAnalyticsService_AddMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAnalyticsServiceServer).AddMedicalRecord(ctx, req.(*AddMedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAnalyticsService_GetMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAnalyticsServiceServer).GetMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAnalyticsService_GetMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAnalyticsServiceServer).GetMedicalRecord(ctx, req.(*MedicalRecordID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAnalyticsService_UpdateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAnalyticsServiceServer).UpdateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAnalyticsService_UpdateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAnalyticsServiceServer).UpdateMedicalRecord(ctx, req.(*UpdateMedicalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAnalyticsService_DeleteMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAnalyticsServiceServer).DeleteMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAnalyticsService_DeleteMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAnalyticsServiceServer).DeleteMedicalRecord(ctx, req.(*MedicalRecordID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAnalyticsService_ListMedicalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAnalyticsServiceServer).ListMedicalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAnalyticsService_ListMedicalRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAnalyticsServiceServer).ListMedicalRecords(ctx, req.(*MedicalRecordFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthAnalyticsService_ServiceDesc is the grpc.ServiceDesc for HealthAnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthAnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.HealthAnalyticsService",
	HandlerType: (*HealthAnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMedicalRecord",
			Handler:    _HealthAnalyticsService_AddMedicalRecord_Handler,
		},
		{
			MethodName: "GetMedicalRecord",
			Handler:    _HealthAnalyticsService_GetMedicalRecord_Handler,
		},
		{
			MethodName: "UpdateMedicalRecord",
			Handler:    _HealthAnalyticsService_UpdateMedicalRecord_Handler,
		},
		{
			MethodName: "DeleteMedicalRecord",
			Handler:    _HealthAnalyticsService_DeleteMedicalRecord_Handler,
		},
		{
			MethodName: "ListMedicalRecords",
			Handler:    _HealthAnalyticsService_ListMedicalRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helath/medical-records.proto",
}
